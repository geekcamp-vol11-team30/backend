// Code generated by MockGen. DO NOT EDIT.
// Source: ./auth.go

// Package mockcontroller is a generated GoMock package.
package mockcontroller

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockAuthController is a mock of AuthController interface.
type MockAuthController struct {
	ctrl     *gomock.Controller
	recorder *MockAuthControllerMockRecorder
}

// MockAuthControllerMockRecorder is the mock recorder for MockAuthController.
type MockAuthControllerMockRecorder struct {
	mock *MockAuthController
}

// NewMockAuthController creates a new mock instance.
func NewMockAuthController(ctrl *gomock.Controller) *MockAuthController {
	mock := &MockAuthController{ctrl: ctrl}
	mock.recorder = &MockAuthControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthController) EXPECT() *MockAuthControllerMockRecorder {
	return m.recorder
}

// CreateUnregisteredUserAndToken mocks base method.
func (m *MockAuthController) CreateUnregisteredUserAndToken(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUnregisteredUserAndToken", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUnregisteredUserAndToken indicates an expected call of CreateUnregisteredUserAndToken.
func (mr *MockAuthControllerMockRecorder) CreateUnregisteredUserAndToken(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUnregisteredUserAndToken", reflect.TypeOf((*MockAuthController)(nil).CreateUnregisteredUserAndToken), c)
}

// RefreshToken mocks base method.
func (m *MockAuthController) RefreshToken(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthControllerMockRecorder) RefreshToken(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthController)(nil).RefreshToken), c)
}
