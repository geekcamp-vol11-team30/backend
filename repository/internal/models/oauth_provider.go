// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OauthProvider is an object representing the database table.
type OauthProvider struct {
	ID           string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name         string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	ClientID     string    `boil:"client_id" json:"client_id" toml:"client_id" yaml:"client_id"`
	ClientSecret string    `boil:"client_secret" json:"client_secret" toml:"client_secret" yaml:"client_secret"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *oauthProviderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L oauthProviderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OauthProviderColumns = struct {
	ID           string
	Name         string
	ClientID     string
	ClientSecret string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	Name:         "name",
	ClientID:     "client_id",
	ClientSecret: "client_secret",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var OauthProviderTableColumns = struct {
	ID           string
	Name         string
	ClientID     string
	ClientSecret string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "oauth_provider.id",
	Name:         "oauth_provider.name",
	ClientID:     "oauth_provider.client_id",
	ClientSecret: "oauth_provider.client_secret",
	CreatedAt:    "oauth_provider.created_at",
	UpdatedAt:    "oauth_provider.updated_at",
}

// Generated where

var OauthProviderWhere = struct {
	ID           whereHelperstring
	Name         whereHelperstring
	ClientID     whereHelperstring
	ClientSecret whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	ID:           whereHelperstring{field: "`oauth_provider`.`id`"},
	Name:         whereHelperstring{field: "`oauth_provider`.`name`"},
	ClientID:     whereHelperstring{field: "`oauth_provider`.`client_id`"},
	ClientSecret: whereHelperstring{field: "`oauth_provider`.`client_secret`"},
	CreatedAt:    whereHelpertime_Time{field: "`oauth_provider`.`created_at`"},
	UpdatedAt:    whereHelpertime_Time{field: "`oauth_provider`.`updated_at`"},
}

// OauthProviderRels is where relationship names are stored.
var OauthProviderRels = struct {
	ProviderOauthUserInfos string
}{
	ProviderOauthUserInfos: "ProviderOauthUserInfos",
}

// oauthProviderR is where relationships are stored.
type oauthProviderR struct {
	ProviderOauthUserInfos OauthUserInfoSlice `boil:"ProviderOauthUserInfos" json:"ProviderOauthUserInfos" toml:"ProviderOauthUserInfos" yaml:"ProviderOauthUserInfos"`
}

// NewStruct creates a new relationship struct
func (*oauthProviderR) NewStruct() *oauthProviderR {
	return &oauthProviderR{}
}

func (r *oauthProviderR) GetProviderOauthUserInfos() OauthUserInfoSlice {
	if r == nil {
		return nil
	}
	return r.ProviderOauthUserInfos
}

// oauthProviderL is where Load methods for each relationship are stored.
type oauthProviderL struct{}

var (
	oauthProviderAllColumns            = []string{"id", "name", "client_id", "client_secret", "created_at", "updated_at"}
	oauthProviderColumnsWithoutDefault = []string{"id", "name", "client_id", "client_secret"}
	oauthProviderColumnsWithDefault    = []string{"created_at", "updated_at"}
	oauthProviderPrimaryKeyColumns     = []string{"id"}
	oauthProviderGeneratedColumns      = []string{}
)

type (
	// OauthProviderSlice is an alias for a slice of pointers to OauthProvider.
	// This should almost always be used instead of []OauthProvider.
	OauthProviderSlice []*OauthProvider
	// OauthProviderHook is the signature for custom OauthProvider hook methods
	OauthProviderHook func(context.Context, boil.ContextExecutor, *OauthProvider) error

	oauthProviderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	oauthProviderType                 = reflect.TypeOf(&OauthProvider{})
	oauthProviderMapping              = queries.MakeStructMapping(oauthProviderType)
	oauthProviderPrimaryKeyMapping, _ = queries.BindMapping(oauthProviderType, oauthProviderMapping, oauthProviderPrimaryKeyColumns)
	oauthProviderInsertCacheMut       sync.RWMutex
	oauthProviderInsertCache          = make(map[string]insertCache)
	oauthProviderUpdateCacheMut       sync.RWMutex
	oauthProviderUpdateCache          = make(map[string]updateCache)
	oauthProviderUpsertCacheMut       sync.RWMutex
	oauthProviderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var oauthProviderAfterSelectHooks []OauthProviderHook

var oauthProviderBeforeInsertHooks []OauthProviderHook
var oauthProviderAfterInsertHooks []OauthProviderHook

var oauthProviderBeforeUpdateHooks []OauthProviderHook
var oauthProviderAfterUpdateHooks []OauthProviderHook

var oauthProviderBeforeDeleteHooks []OauthProviderHook
var oauthProviderAfterDeleteHooks []OauthProviderHook

var oauthProviderBeforeUpsertHooks []OauthProviderHook
var oauthProviderAfterUpsertHooks []OauthProviderHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OauthProvider) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthProviderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OauthProvider) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthProviderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OauthProvider) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthProviderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OauthProvider) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthProviderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OauthProvider) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthProviderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OauthProvider) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthProviderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OauthProvider) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthProviderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OauthProvider) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthProviderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OauthProvider) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthProviderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOauthProviderHook registers your hook function for all future operations.
func AddOauthProviderHook(hookPoint boil.HookPoint, oauthProviderHook OauthProviderHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		oauthProviderAfterSelectHooks = append(oauthProviderAfterSelectHooks, oauthProviderHook)
	case boil.BeforeInsertHook:
		oauthProviderBeforeInsertHooks = append(oauthProviderBeforeInsertHooks, oauthProviderHook)
	case boil.AfterInsertHook:
		oauthProviderAfterInsertHooks = append(oauthProviderAfterInsertHooks, oauthProviderHook)
	case boil.BeforeUpdateHook:
		oauthProviderBeforeUpdateHooks = append(oauthProviderBeforeUpdateHooks, oauthProviderHook)
	case boil.AfterUpdateHook:
		oauthProviderAfterUpdateHooks = append(oauthProviderAfterUpdateHooks, oauthProviderHook)
	case boil.BeforeDeleteHook:
		oauthProviderBeforeDeleteHooks = append(oauthProviderBeforeDeleteHooks, oauthProviderHook)
	case boil.AfterDeleteHook:
		oauthProviderAfterDeleteHooks = append(oauthProviderAfterDeleteHooks, oauthProviderHook)
	case boil.BeforeUpsertHook:
		oauthProviderBeforeUpsertHooks = append(oauthProviderBeforeUpsertHooks, oauthProviderHook)
	case boil.AfterUpsertHook:
		oauthProviderAfterUpsertHooks = append(oauthProviderAfterUpsertHooks, oauthProviderHook)
	}
}

// One returns a single oauthProvider record from the query.
func (q oauthProviderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OauthProvider, error) {
	o := &OauthProvider{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for oauth_provider")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OauthProvider records from the query.
func (q oauthProviderQuery) All(ctx context.Context, exec boil.ContextExecutor) (OauthProviderSlice, error) {
	var o []*OauthProvider

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OauthProvider slice")
	}

	if len(oauthProviderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OauthProvider records in the query.
func (q oauthProviderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count oauth_provider rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q oauthProviderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if oauth_provider exists")
	}

	return count > 0, nil
}

// ProviderOauthUserInfos retrieves all the oauth_user_info's OauthUserInfos with an executor via provider_id column.
func (o *OauthProvider) ProviderOauthUserInfos(mods ...qm.QueryMod) oauthUserInfoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`oauth_user_info`.`provider_id`=?", o.ID),
	)

	return OauthUserInfos(queryMods...)
}

// LoadProviderOauthUserInfos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (oauthProviderL) LoadProviderOauthUserInfos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOauthProvider interface{}, mods queries.Applicator) error {
	var slice []*OauthProvider
	var object *OauthProvider

	if singular {
		var ok bool
		object, ok = maybeOauthProvider.(*OauthProvider)
		if !ok {
			object = new(OauthProvider)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOauthProvider)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOauthProvider))
			}
		}
	} else {
		s, ok := maybeOauthProvider.(*[]*OauthProvider)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOauthProvider)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOauthProvider))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &oauthProviderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &oauthProviderR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`oauth_user_info`),
		qm.WhereIn(`oauth_user_info.provider_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load oauth_user_info")
	}

	var resultSlice []*OauthUserInfo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice oauth_user_info")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on oauth_user_info")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for oauth_user_info")
	}

	if len(oauthUserInfoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProviderOauthUserInfos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &oauthUserInfoR{}
			}
			foreign.R.Provider = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProviderID {
				local.R.ProviderOauthUserInfos = append(local.R.ProviderOauthUserInfos, foreign)
				if foreign.R == nil {
					foreign.R = &oauthUserInfoR{}
				}
				foreign.R.Provider = local
				break
			}
		}
	}

	return nil
}

// AddProviderOauthUserInfos adds the given related objects to the existing relationships
// of the oauth_provider, optionally inserting them as new records.
// Appends related to o.R.ProviderOauthUserInfos.
// Sets related.R.Provider appropriately.
func (o *OauthProvider) AddProviderOauthUserInfos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OauthUserInfo) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProviderID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `oauth_user_info` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"provider_id"}),
				strmangle.WhereClause("`", "`", 0, oauthUserInfoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProviderID = o.ID
		}
	}

	if o.R == nil {
		o.R = &oauthProviderR{
			ProviderOauthUserInfos: related,
		}
	} else {
		o.R.ProviderOauthUserInfos = append(o.R.ProviderOauthUserInfos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &oauthUserInfoR{
				Provider: o,
			}
		} else {
			rel.R.Provider = o
		}
	}
	return nil
}

// OauthProviders retrieves all the records using an executor.
func OauthProviders(mods ...qm.QueryMod) oauthProviderQuery {
	mods = append(mods, qm.From("`oauth_provider`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`oauth_provider`.*"})
	}

	return oauthProviderQuery{q}
}

// FindOauthProvider retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOauthProvider(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*OauthProvider, error) {
	oauthProviderObj := &OauthProvider{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `oauth_provider` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, oauthProviderObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from oauth_provider")
	}

	if err = oauthProviderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return oauthProviderObj, err
	}

	return oauthProviderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OauthProvider) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no oauth_provider provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(oauthProviderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	oauthProviderInsertCacheMut.RLock()
	cache, cached := oauthProviderInsertCache[key]
	oauthProviderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			oauthProviderAllColumns,
			oauthProviderColumnsWithDefault,
			oauthProviderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(oauthProviderType, oauthProviderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(oauthProviderType, oauthProviderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `oauth_provider` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `oauth_provider` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `oauth_provider` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, oauthProviderPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into oauth_provider")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for oauth_provider")
	}

CacheNoHooks:
	if !cached {
		oauthProviderInsertCacheMut.Lock()
		oauthProviderInsertCache[key] = cache
		oauthProviderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OauthProvider.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OauthProvider) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	oauthProviderUpdateCacheMut.RLock()
	cache, cached := oauthProviderUpdateCache[key]
	oauthProviderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			oauthProviderAllColumns,
			oauthProviderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update oauth_provider, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `oauth_provider` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, oauthProviderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(oauthProviderType, oauthProviderMapping, append(wl, oauthProviderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update oauth_provider row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for oauth_provider")
	}

	if !cached {
		oauthProviderUpdateCacheMut.Lock()
		oauthProviderUpdateCache[key] = cache
		oauthProviderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q oauthProviderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for oauth_provider")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for oauth_provider")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OauthProviderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oauthProviderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `oauth_provider` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, oauthProviderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in oauthProvider slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all oauthProvider")
	}
	return rowsAff, nil
}

var mySQLOauthProviderUniqueColumns = []string{
	"id",
	"name",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OauthProvider) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no oauth_provider provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(oauthProviderColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOauthProviderUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	oauthProviderUpsertCacheMut.RLock()
	cache, cached := oauthProviderUpsertCache[key]
	oauthProviderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			oauthProviderAllColumns,
			oauthProviderColumnsWithDefault,
			oauthProviderColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			oauthProviderAllColumns,
			oauthProviderPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert oauth_provider, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`oauth_provider`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `oauth_provider` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(oauthProviderType, oauthProviderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(oauthProviderType, oauthProviderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for oauth_provider")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(oauthProviderType, oauthProviderMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for oauth_provider")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for oauth_provider")
	}

CacheNoHooks:
	if !cached {
		oauthProviderUpsertCacheMut.Lock()
		oauthProviderUpsertCache[key] = cache
		oauthProviderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OauthProvider record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OauthProvider) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OauthProvider provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), oauthProviderPrimaryKeyMapping)
	sql := "DELETE FROM `oauth_provider` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from oauth_provider")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for oauth_provider")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q oauthProviderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no oauthProviderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from oauth_provider")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for oauth_provider")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OauthProviderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(oauthProviderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oauthProviderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `oauth_provider` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, oauthProviderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from oauthProvider slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for oauth_provider")
	}

	if len(oauthProviderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OauthProvider) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOauthProvider(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OauthProviderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OauthProviderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oauthProviderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `oauth_provider`.* FROM `oauth_provider` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, oauthProviderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OauthProviderSlice")
	}

	*o = slice

	return nil
}

// OauthProviderExists checks if the OauthProvider row exists.
func OauthProviderExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `oauth_provider` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if oauth_provider exists")
	}

	return exists, nil
}

// Exists checks if the OauthProvider row exists.
func (o *OauthProvider) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OauthProviderExists(ctx, exec, o.ID)
}
