// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserEventAnswer is an object representing the database table.
type UserEventAnswer struct {
	ID           string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID       string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	EventID      string    `boil:"event_id" json:"event_id" toml:"event_id" yaml:"event_id"`
	UserNickname string    `boil:"user_nickname" json:"user_nickname" toml:"user_nickname" yaml:"user_nickname"`
	Note         string    `boil:"note" json:"note" toml:"note" yaml:"note"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userEventAnswerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userEventAnswerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserEventAnswerColumns = struct {
	ID           string
	UserID       string
	EventID      string
	UserNickname string
	Note         string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	UserID:       "user_id",
	EventID:      "event_id",
	UserNickname: "user_nickname",
	Note:         "note",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var UserEventAnswerTableColumns = struct {
	ID           string
	UserID       string
	EventID      string
	UserNickname string
	Note         string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "user_event_answer.id",
	UserID:       "user_event_answer.user_id",
	EventID:      "user_event_answer.event_id",
	UserNickname: "user_event_answer.user_nickname",
	Note:         "user_event_answer.note",
	CreatedAt:    "user_event_answer.created_at",
	UpdatedAt:    "user_event_answer.updated_at",
}

// Generated where

var UserEventAnswerWhere = struct {
	ID           whereHelperstring
	UserID       whereHelperstring
	EventID      whereHelperstring
	UserNickname whereHelperstring
	Note         whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	ID:           whereHelperstring{field: "`user_event_answer`.`id`"},
	UserID:       whereHelperstring{field: "`user_event_answer`.`user_id`"},
	EventID:      whereHelperstring{field: "`user_event_answer`.`event_id`"},
	UserNickname: whereHelperstring{field: "`user_event_answer`.`user_nickname`"},
	Note:         whereHelperstring{field: "`user_event_answer`.`note`"},
	CreatedAt:    whereHelpertime_Time{field: "`user_event_answer`.`created_at`"},
	UpdatedAt:    whereHelpertime_Time{field: "`user_event_answer`.`updated_at`"},
}

// UserEventAnswerRels is where relationship names are stored.
var UserEventAnswerRels = struct {
	Event                string
	User                 string
	UserEventAnswerUnits string
}{
	Event:                "Event",
	User:                 "User",
	UserEventAnswerUnits: "UserEventAnswerUnits",
}

// userEventAnswerR is where relationships are stored.
type userEventAnswerR struct {
	Event                *Event                   `boil:"Event" json:"Event" toml:"Event" yaml:"Event"`
	User                 *User                    `boil:"User" json:"User" toml:"User" yaml:"User"`
	UserEventAnswerUnits UserEventAnswerUnitSlice `boil:"UserEventAnswerUnits" json:"UserEventAnswerUnits" toml:"UserEventAnswerUnits" yaml:"UserEventAnswerUnits"`
}

// NewStruct creates a new relationship struct
func (*userEventAnswerR) NewStruct() *userEventAnswerR {
	return &userEventAnswerR{}
}

func (r *userEventAnswerR) GetEvent() *Event {
	if r == nil {
		return nil
	}
	return r.Event
}

func (r *userEventAnswerR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *userEventAnswerR) GetUserEventAnswerUnits() UserEventAnswerUnitSlice {
	if r == nil {
		return nil
	}
	return r.UserEventAnswerUnits
}

// userEventAnswerL is where Load methods for each relationship are stored.
type userEventAnswerL struct{}

var (
	userEventAnswerAllColumns            = []string{"id", "user_id", "event_id", "user_nickname", "note", "created_at", "updated_at"}
	userEventAnswerColumnsWithoutDefault = []string{"id", "user_id", "event_id", "user_nickname", "note"}
	userEventAnswerColumnsWithDefault    = []string{"created_at", "updated_at"}
	userEventAnswerPrimaryKeyColumns     = []string{"id"}
	userEventAnswerGeneratedColumns      = []string{}
)

type (
	// UserEventAnswerSlice is an alias for a slice of pointers to UserEventAnswer.
	// This should almost always be used instead of []UserEventAnswer.
	UserEventAnswerSlice []*UserEventAnswer
	// UserEventAnswerHook is the signature for custom UserEventAnswer hook methods
	UserEventAnswerHook func(context.Context, boil.ContextExecutor, *UserEventAnswer) error

	userEventAnswerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userEventAnswerType                 = reflect.TypeOf(&UserEventAnswer{})
	userEventAnswerMapping              = queries.MakeStructMapping(userEventAnswerType)
	userEventAnswerPrimaryKeyMapping, _ = queries.BindMapping(userEventAnswerType, userEventAnswerMapping, userEventAnswerPrimaryKeyColumns)
	userEventAnswerInsertCacheMut       sync.RWMutex
	userEventAnswerInsertCache          = make(map[string]insertCache)
	userEventAnswerUpdateCacheMut       sync.RWMutex
	userEventAnswerUpdateCache          = make(map[string]updateCache)
	userEventAnswerUpsertCacheMut       sync.RWMutex
	userEventAnswerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userEventAnswerAfterSelectHooks []UserEventAnswerHook

var userEventAnswerBeforeInsertHooks []UserEventAnswerHook
var userEventAnswerAfterInsertHooks []UserEventAnswerHook

var userEventAnswerBeforeUpdateHooks []UserEventAnswerHook
var userEventAnswerAfterUpdateHooks []UserEventAnswerHook

var userEventAnswerBeforeDeleteHooks []UserEventAnswerHook
var userEventAnswerAfterDeleteHooks []UserEventAnswerHook

var userEventAnswerBeforeUpsertHooks []UserEventAnswerHook
var userEventAnswerAfterUpsertHooks []UserEventAnswerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserEventAnswer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEventAnswerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserEventAnswer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEventAnswerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserEventAnswer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEventAnswerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserEventAnswer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEventAnswerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserEventAnswer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEventAnswerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserEventAnswer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEventAnswerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserEventAnswer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEventAnswerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserEventAnswer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEventAnswerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserEventAnswer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEventAnswerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserEventAnswerHook registers your hook function for all future operations.
func AddUserEventAnswerHook(hookPoint boil.HookPoint, userEventAnswerHook UserEventAnswerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userEventAnswerAfterSelectHooks = append(userEventAnswerAfterSelectHooks, userEventAnswerHook)
	case boil.BeforeInsertHook:
		userEventAnswerBeforeInsertHooks = append(userEventAnswerBeforeInsertHooks, userEventAnswerHook)
	case boil.AfterInsertHook:
		userEventAnswerAfterInsertHooks = append(userEventAnswerAfterInsertHooks, userEventAnswerHook)
	case boil.BeforeUpdateHook:
		userEventAnswerBeforeUpdateHooks = append(userEventAnswerBeforeUpdateHooks, userEventAnswerHook)
	case boil.AfterUpdateHook:
		userEventAnswerAfterUpdateHooks = append(userEventAnswerAfterUpdateHooks, userEventAnswerHook)
	case boil.BeforeDeleteHook:
		userEventAnswerBeforeDeleteHooks = append(userEventAnswerBeforeDeleteHooks, userEventAnswerHook)
	case boil.AfterDeleteHook:
		userEventAnswerAfterDeleteHooks = append(userEventAnswerAfterDeleteHooks, userEventAnswerHook)
	case boil.BeforeUpsertHook:
		userEventAnswerBeforeUpsertHooks = append(userEventAnswerBeforeUpsertHooks, userEventAnswerHook)
	case boil.AfterUpsertHook:
		userEventAnswerAfterUpsertHooks = append(userEventAnswerAfterUpsertHooks, userEventAnswerHook)
	}
}

// One returns a single userEventAnswer record from the query.
func (q userEventAnswerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserEventAnswer, error) {
	o := &UserEventAnswer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_event_answer")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserEventAnswer records from the query.
func (q userEventAnswerQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserEventAnswerSlice, error) {
	var o []*UserEventAnswer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserEventAnswer slice")
	}

	if len(userEventAnswerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserEventAnswer records in the query.
func (q userEventAnswerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_event_answer rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userEventAnswerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_event_answer exists")
	}

	return count > 0, nil
}

// Event pointed to by the foreign key.
func (o *UserEventAnswer) Event(mods ...qm.QueryMod) eventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.EventID),
	}

	queryMods = append(queryMods, mods...)

	return Events(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserEventAnswer) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// UserEventAnswerUnits retrieves all the user_event_answer_unit's UserEventAnswerUnits with an executor.
func (o *UserEventAnswer) UserEventAnswerUnits(mods ...qm.QueryMod) userEventAnswerUnitQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`user_event_answer_unit`.`user_event_answer_id`=?", o.ID),
	)

	return UserEventAnswerUnits(queryMods...)
}

// LoadEvent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userEventAnswerL) LoadEvent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserEventAnswer interface{}, mods queries.Applicator) error {
	var slice []*UserEventAnswer
	var object *UserEventAnswer

	if singular {
		var ok bool
		object, ok = maybeUserEventAnswer.(*UserEventAnswer)
		if !ok {
			object = new(UserEventAnswer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserEventAnswer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserEventAnswer))
			}
		}
	} else {
		s, ok := maybeUserEventAnswer.(*[]*UserEventAnswer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserEventAnswer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserEventAnswer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userEventAnswerR{}
		}
		args = append(args, object.EventID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userEventAnswerR{}
			}

			for _, a := range args {
				if a == obj.EventID {
					continue Outer
				}
			}

			args = append(args, obj.EventID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`event`),
		qm.WhereIn(`event.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Event")
	}

	var resultSlice []*Event
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Event")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for event")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for event")
	}

	if len(eventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Event = foreign
		if foreign.R == nil {
			foreign.R = &eventR{}
		}
		foreign.R.UserEventAnswers = append(foreign.R.UserEventAnswers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EventID == foreign.ID {
				local.R.Event = foreign
				if foreign.R == nil {
					foreign.R = &eventR{}
				}
				foreign.R.UserEventAnswers = append(foreign.R.UserEventAnswers, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userEventAnswerL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserEventAnswer interface{}, mods queries.Applicator) error {
	var slice []*UserEventAnswer
	var object *UserEventAnswer

	if singular {
		var ok bool
		object, ok = maybeUserEventAnswer.(*UserEventAnswer)
		if !ok {
			object = new(UserEventAnswer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserEventAnswer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserEventAnswer))
			}
		}
	} else {
		s, ok := maybeUserEventAnswer.(*[]*UserEventAnswer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserEventAnswer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserEventAnswer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userEventAnswerR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userEventAnswerR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserEventAnswers = append(foreign.R.UserEventAnswers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserEventAnswers = append(foreign.R.UserEventAnswers, local)
				break
			}
		}
	}

	return nil
}

// LoadUserEventAnswerUnits allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userEventAnswerL) LoadUserEventAnswerUnits(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserEventAnswer interface{}, mods queries.Applicator) error {
	var slice []*UserEventAnswer
	var object *UserEventAnswer

	if singular {
		var ok bool
		object, ok = maybeUserEventAnswer.(*UserEventAnswer)
		if !ok {
			object = new(UserEventAnswer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserEventAnswer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserEventAnswer))
			}
		}
	} else {
		s, ok := maybeUserEventAnswer.(*[]*UserEventAnswer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserEventAnswer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserEventAnswer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userEventAnswerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userEventAnswerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_event_answer_unit`),
		qm.WhereIn(`user_event_answer_unit.user_event_answer_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_event_answer_unit")
	}

	var resultSlice []*UserEventAnswerUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_event_answer_unit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_event_answer_unit")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_event_answer_unit")
	}

	if len(userEventAnswerUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserEventAnswerUnits = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userEventAnswerUnitR{}
			}
			foreign.R.UserEventAnswer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserEventAnswerID {
				local.R.UserEventAnswerUnits = append(local.R.UserEventAnswerUnits, foreign)
				if foreign.R == nil {
					foreign.R = &userEventAnswerUnitR{}
				}
				foreign.R.UserEventAnswer = local
				break
			}
		}
	}

	return nil
}

// SetEvent of the userEventAnswer to the related item.
// Sets o.R.Event to related.
// Adds o to related.R.UserEventAnswers.
func (o *UserEventAnswer) SetEvent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Event) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_event_answer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"event_id"}),
		strmangle.WhereClause("`", "`", 0, userEventAnswerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EventID = related.ID
	if o.R == nil {
		o.R = &userEventAnswerR{
			Event: related,
		}
	} else {
		o.R.Event = related
	}

	if related.R == nil {
		related.R = &eventR{
			UserEventAnswers: UserEventAnswerSlice{o},
		}
	} else {
		related.R.UserEventAnswers = append(related.R.UserEventAnswers, o)
	}

	return nil
}

// SetUser of the userEventAnswer to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserEventAnswers.
func (o *UserEventAnswer) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_event_answer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, userEventAnswerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userEventAnswerR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserEventAnswers: UserEventAnswerSlice{o},
		}
	} else {
		related.R.UserEventAnswers = append(related.R.UserEventAnswers, o)
	}

	return nil
}

// AddUserEventAnswerUnits adds the given related objects to the existing relationships
// of the user_event_answer, optionally inserting them as new records.
// Appends related to o.R.UserEventAnswerUnits.
// Sets related.R.UserEventAnswer appropriately.
func (o *UserEventAnswer) AddUserEventAnswerUnits(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserEventAnswerUnit) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserEventAnswerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `user_event_answer_unit` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_event_answer_id"}),
				strmangle.WhereClause("`", "`", 0, userEventAnswerUnitPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserEventAnswerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userEventAnswerR{
			UserEventAnswerUnits: related,
		}
	} else {
		o.R.UserEventAnswerUnits = append(o.R.UserEventAnswerUnits, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userEventAnswerUnitR{
				UserEventAnswer: o,
			}
		} else {
			rel.R.UserEventAnswer = o
		}
	}
	return nil
}

// UserEventAnswers retrieves all the records using an executor.
func UserEventAnswers(mods ...qm.QueryMod) userEventAnswerQuery {
	mods = append(mods, qm.From("`user_event_answer`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_event_answer`.*"})
	}

	return userEventAnswerQuery{q}
}

// FindUserEventAnswer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserEventAnswer(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*UserEventAnswer, error) {
	userEventAnswerObj := &UserEventAnswer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_event_answer` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userEventAnswerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_event_answer")
	}

	if err = userEventAnswerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userEventAnswerObj, err
	}

	return userEventAnswerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserEventAnswer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_event_answer provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userEventAnswerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userEventAnswerInsertCacheMut.RLock()
	cache, cached := userEventAnswerInsertCache[key]
	userEventAnswerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userEventAnswerAllColumns,
			userEventAnswerColumnsWithDefault,
			userEventAnswerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userEventAnswerType, userEventAnswerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userEventAnswerType, userEventAnswerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_event_answer` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_event_answer` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_event_answer` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userEventAnswerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_event_answer")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_event_answer")
	}

CacheNoHooks:
	if !cached {
		userEventAnswerInsertCacheMut.Lock()
		userEventAnswerInsertCache[key] = cache
		userEventAnswerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserEventAnswer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserEventAnswer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userEventAnswerUpdateCacheMut.RLock()
	cache, cached := userEventAnswerUpdateCache[key]
	userEventAnswerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userEventAnswerAllColumns,
			userEventAnswerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_event_answer, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_event_answer` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userEventAnswerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userEventAnswerType, userEventAnswerMapping, append(wl, userEventAnswerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_event_answer row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_event_answer")
	}

	if !cached {
		userEventAnswerUpdateCacheMut.Lock()
		userEventAnswerUpdateCache[key] = cache
		userEventAnswerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userEventAnswerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_event_answer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_event_answer")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserEventAnswerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userEventAnswerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_event_answer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userEventAnswerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userEventAnswer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userEventAnswer")
	}
	return rowsAff, nil
}

var mySQLUserEventAnswerUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserEventAnswer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_event_answer provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userEventAnswerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserEventAnswerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userEventAnswerUpsertCacheMut.RLock()
	cache, cached := userEventAnswerUpsertCache[key]
	userEventAnswerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userEventAnswerAllColumns,
			userEventAnswerColumnsWithDefault,
			userEventAnswerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userEventAnswerAllColumns,
			userEventAnswerPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert user_event_answer, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`user_event_answer`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_event_answer` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userEventAnswerType, userEventAnswerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userEventAnswerType, userEventAnswerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for user_event_answer")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userEventAnswerType, userEventAnswerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for user_event_answer")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_event_answer")
	}

CacheNoHooks:
	if !cached {
		userEventAnswerUpsertCacheMut.Lock()
		userEventAnswerUpsertCache[key] = cache
		userEventAnswerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserEventAnswer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserEventAnswer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserEventAnswer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userEventAnswerPrimaryKeyMapping)
	sql := "DELETE FROM `user_event_answer` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_event_answer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_event_answer")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userEventAnswerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userEventAnswerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_event_answer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_event_answer")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserEventAnswerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userEventAnswerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userEventAnswerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_event_answer` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userEventAnswerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userEventAnswer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_event_answer")
	}

	if len(userEventAnswerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserEventAnswer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserEventAnswer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserEventAnswerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserEventAnswerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userEventAnswerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_event_answer`.* FROM `user_event_answer` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userEventAnswerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserEventAnswerSlice")
	}

	*o = slice

	return nil
}

// UserEventAnswerExists checks if the UserEventAnswer row exists.
func UserEventAnswerExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_event_answer` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_event_answer exists")
	}

	return exists, nil
}

// Exists checks if the UserEventAnswer row exists.
func (o *UserEventAnswer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserEventAnswerExists(ctx, exec, o.ID)
}
