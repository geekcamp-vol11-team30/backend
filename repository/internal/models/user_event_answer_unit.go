// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserEventAnswerUnit is an object representing the database table.
type UserEventAnswerUnit struct {
	ID                string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserEventAnswerID string    `boil:"user_event_answer_id" json:"user_event_answer_id" toml:"user_event_answer_id" yaml:"user_event_answer_id"`
	EventTimeUnitID   string    `boil:"event_time_unit_id" json:"event_time_unit_id" toml:"event_time_unit_id" yaml:"event_time_unit_id"`
	Availability      string    `boil:"availability" json:"availability" toml:"availability" yaml:"availability"`
	CreatedAt         time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userEventAnswerUnitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userEventAnswerUnitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserEventAnswerUnitColumns = struct {
	ID                string
	UserEventAnswerID string
	EventTimeUnitID   string
	Availability      string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "id",
	UserEventAnswerID: "user_event_answer_id",
	EventTimeUnitID:   "event_time_unit_id",
	Availability:      "availability",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
}

var UserEventAnswerUnitTableColumns = struct {
	ID                string
	UserEventAnswerID string
	EventTimeUnitID   string
	Availability      string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "user_event_answer_unit.id",
	UserEventAnswerID: "user_event_answer_unit.user_event_answer_id",
	EventTimeUnitID:   "user_event_answer_unit.event_time_unit_id",
	Availability:      "user_event_answer_unit.availability",
	CreatedAt:         "user_event_answer_unit.created_at",
	UpdatedAt:         "user_event_answer_unit.updated_at",
}

// Generated where

var UserEventAnswerUnitWhere = struct {
	ID                whereHelperstring
	UserEventAnswerID whereHelperstring
	EventTimeUnitID   whereHelperstring
	Availability      whereHelperstring
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
}{
	ID:                whereHelperstring{field: "`user_event_answer_unit`.`id`"},
	UserEventAnswerID: whereHelperstring{field: "`user_event_answer_unit`.`user_event_answer_id`"},
	EventTimeUnitID:   whereHelperstring{field: "`user_event_answer_unit`.`event_time_unit_id`"},
	Availability:      whereHelperstring{field: "`user_event_answer_unit`.`availability`"},
	CreatedAt:         whereHelpertime_Time{field: "`user_event_answer_unit`.`created_at`"},
	UpdatedAt:         whereHelpertime_Time{field: "`user_event_answer_unit`.`updated_at`"},
}

// UserEventAnswerUnitRels is where relationship names are stored.
var UserEventAnswerUnitRels = struct {
	EventTimeUnit   string
	UserEventAnswer string
}{
	EventTimeUnit:   "EventTimeUnit",
	UserEventAnswer: "UserEventAnswer",
}

// userEventAnswerUnitR is where relationships are stored.
type userEventAnswerUnitR struct {
	EventTimeUnit   *EventTimeUnit   `boil:"EventTimeUnit" json:"EventTimeUnit" toml:"EventTimeUnit" yaml:"EventTimeUnit"`
	UserEventAnswer *UserEventAnswer `boil:"UserEventAnswer" json:"UserEventAnswer" toml:"UserEventAnswer" yaml:"UserEventAnswer"`
}

// NewStruct creates a new relationship struct
func (*userEventAnswerUnitR) NewStruct() *userEventAnswerUnitR {
	return &userEventAnswerUnitR{}
}

func (r *userEventAnswerUnitR) GetEventTimeUnit() *EventTimeUnit {
	if r == nil {
		return nil
	}
	return r.EventTimeUnit
}

func (r *userEventAnswerUnitR) GetUserEventAnswer() *UserEventAnswer {
	if r == nil {
		return nil
	}
	return r.UserEventAnswer
}

// userEventAnswerUnitL is where Load methods for each relationship are stored.
type userEventAnswerUnitL struct{}

var (
	userEventAnswerUnitAllColumns            = []string{"id", "user_event_answer_id", "event_time_unit_id", "availability", "created_at", "updated_at"}
	userEventAnswerUnitColumnsWithoutDefault = []string{"id", "user_event_answer_id", "event_time_unit_id", "availability"}
	userEventAnswerUnitColumnsWithDefault    = []string{"created_at", "updated_at"}
	userEventAnswerUnitPrimaryKeyColumns     = []string{"id"}
	userEventAnswerUnitGeneratedColumns      = []string{}
)

type (
	// UserEventAnswerUnitSlice is an alias for a slice of pointers to UserEventAnswerUnit.
	// This should almost always be used instead of []UserEventAnswerUnit.
	UserEventAnswerUnitSlice []*UserEventAnswerUnit
	// UserEventAnswerUnitHook is the signature for custom UserEventAnswerUnit hook methods
	UserEventAnswerUnitHook func(context.Context, boil.ContextExecutor, *UserEventAnswerUnit) error

	userEventAnswerUnitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userEventAnswerUnitType                 = reflect.TypeOf(&UserEventAnswerUnit{})
	userEventAnswerUnitMapping              = queries.MakeStructMapping(userEventAnswerUnitType)
	userEventAnswerUnitPrimaryKeyMapping, _ = queries.BindMapping(userEventAnswerUnitType, userEventAnswerUnitMapping, userEventAnswerUnitPrimaryKeyColumns)
	userEventAnswerUnitInsertCacheMut       sync.RWMutex
	userEventAnswerUnitInsertCache          = make(map[string]insertCache)
	userEventAnswerUnitUpdateCacheMut       sync.RWMutex
	userEventAnswerUnitUpdateCache          = make(map[string]updateCache)
	userEventAnswerUnitUpsertCacheMut       sync.RWMutex
	userEventAnswerUnitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userEventAnswerUnitAfterSelectHooks []UserEventAnswerUnitHook

var userEventAnswerUnitBeforeInsertHooks []UserEventAnswerUnitHook
var userEventAnswerUnitAfterInsertHooks []UserEventAnswerUnitHook

var userEventAnswerUnitBeforeUpdateHooks []UserEventAnswerUnitHook
var userEventAnswerUnitAfterUpdateHooks []UserEventAnswerUnitHook

var userEventAnswerUnitBeforeDeleteHooks []UserEventAnswerUnitHook
var userEventAnswerUnitAfterDeleteHooks []UserEventAnswerUnitHook

var userEventAnswerUnitBeforeUpsertHooks []UserEventAnswerUnitHook
var userEventAnswerUnitAfterUpsertHooks []UserEventAnswerUnitHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserEventAnswerUnit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEventAnswerUnitAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserEventAnswerUnit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEventAnswerUnitBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserEventAnswerUnit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEventAnswerUnitAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserEventAnswerUnit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEventAnswerUnitBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserEventAnswerUnit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEventAnswerUnitAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserEventAnswerUnit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEventAnswerUnitBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserEventAnswerUnit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEventAnswerUnitAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserEventAnswerUnit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEventAnswerUnitBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserEventAnswerUnit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEventAnswerUnitAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserEventAnswerUnitHook registers your hook function for all future operations.
func AddUserEventAnswerUnitHook(hookPoint boil.HookPoint, userEventAnswerUnitHook UserEventAnswerUnitHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userEventAnswerUnitAfterSelectHooks = append(userEventAnswerUnitAfterSelectHooks, userEventAnswerUnitHook)
	case boil.BeforeInsertHook:
		userEventAnswerUnitBeforeInsertHooks = append(userEventAnswerUnitBeforeInsertHooks, userEventAnswerUnitHook)
	case boil.AfterInsertHook:
		userEventAnswerUnitAfterInsertHooks = append(userEventAnswerUnitAfterInsertHooks, userEventAnswerUnitHook)
	case boil.BeforeUpdateHook:
		userEventAnswerUnitBeforeUpdateHooks = append(userEventAnswerUnitBeforeUpdateHooks, userEventAnswerUnitHook)
	case boil.AfterUpdateHook:
		userEventAnswerUnitAfterUpdateHooks = append(userEventAnswerUnitAfterUpdateHooks, userEventAnswerUnitHook)
	case boil.BeforeDeleteHook:
		userEventAnswerUnitBeforeDeleteHooks = append(userEventAnswerUnitBeforeDeleteHooks, userEventAnswerUnitHook)
	case boil.AfterDeleteHook:
		userEventAnswerUnitAfterDeleteHooks = append(userEventAnswerUnitAfterDeleteHooks, userEventAnswerUnitHook)
	case boil.BeforeUpsertHook:
		userEventAnswerUnitBeforeUpsertHooks = append(userEventAnswerUnitBeforeUpsertHooks, userEventAnswerUnitHook)
	case boil.AfterUpsertHook:
		userEventAnswerUnitAfterUpsertHooks = append(userEventAnswerUnitAfterUpsertHooks, userEventAnswerUnitHook)
	}
}

// One returns a single userEventAnswerUnit record from the query.
func (q userEventAnswerUnitQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserEventAnswerUnit, error) {
	o := &UserEventAnswerUnit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_event_answer_unit")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserEventAnswerUnit records from the query.
func (q userEventAnswerUnitQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserEventAnswerUnitSlice, error) {
	var o []*UserEventAnswerUnit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserEventAnswerUnit slice")
	}

	if len(userEventAnswerUnitAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserEventAnswerUnit records in the query.
func (q userEventAnswerUnitQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_event_answer_unit rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userEventAnswerUnitQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_event_answer_unit exists")
	}

	return count > 0, nil
}

// EventTimeUnit pointed to by the foreign key.
func (o *UserEventAnswerUnit) EventTimeUnit(mods ...qm.QueryMod) eventTimeUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.EventTimeUnitID),
	}

	queryMods = append(queryMods, mods...)

	return EventTimeUnits(queryMods...)
}

// UserEventAnswer pointed to by the foreign key.
func (o *UserEventAnswerUnit) UserEventAnswer(mods ...qm.QueryMod) userEventAnswerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserEventAnswerID),
	}

	queryMods = append(queryMods, mods...)

	return UserEventAnswers(queryMods...)
}

// LoadEventTimeUnit allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userEventAnswerUnitL) LoadEventTimeUnit(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserEventAnswerUnit interface{}, mods queries.Applicator) error {
	var slice []*UserEventAnswerUnit
	var object *UserEventAnswerUnit

	if singular {
		var ok bool
		object, ok = maybeUserEventAnswerUnit.(*UserEventAnswerUnit)
		if !ok {
			object = new(UserEventAnswerUnit)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserEventAnswerUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserEventAnswerUnit))
			}
		}
	} else {
		s, ok := maybeUserEventAnswerUnit.(*[]*UserEventAnswerUnit)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserEventAnswerUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserEventAnswerUnit))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userEventAnswerUnitR{}
		}
		args = append(args, object.EventTimeUnitID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userEventAnswerUnitR{}
			}

			for _, a := range args {
				if a == obj.EventTimeUnitID {
					continue Outer
				}
			}

			args = append(args, obj.EventTimeUnitID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`event_time_unit`),
		qm.WhereIn(`event_time_unit.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load EventTimeUnit")
	}

	var resultSlice []*EventTimeUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice EventTimeUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for event_time_unit")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for event_time_unit")
	}

	if len(eventTimeUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EventTimeUnit = foreign
		if foreign.R == nil {
			foreign.R = &eventTimeUnitR{}
		}
		foreign.R.UserEventAnswerUnits = append(foreign.R.UserEventAnswerUnits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EventTimeUnitID == foreign.ID {
				local.R.EventTimeUnit = foreign
				if foreign.R == nil {
					foreign.R = &eventTimeUnitR{}
				}
				foreign.R.UserEventAnswerUnits = append(foreign.R.UserEventAnswerUnits, local)
				break
			}
		}
	}

	return nil
}

// LoadUserEventAnswer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userEventAnswerUnitL) LoadUserEventAnswer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserEventAnswerUnit interface{}, mods queries.Applicator) error {
	var slice []*UserEventAnswerUnit
	var object *UserEventAnswerUnit

	if singular {
		var ok bool
		object, ok = maybeUserEventAnswerUnit.(*UserEventAnswerUnit)
		if !ok {
			object = new(UserEventAnswerUnit)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserEventAnswerUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserEventAnswerUnit))
			}
		}
	} else {
		s, ok := maybeUserEventAnswerUnit.(*[]*UserEventAnswerUnit)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserEventAnswerUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserEventAnswerUnit))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userEventAnswerUnitR{}
		}
		args = append(args, object.UserEventAnswerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userEventAnswerUnitR{}
			}

			for _, a := range args {
				if a == obj.UserEventAnswerID {
					continue Outer
				}
			}

			args = append(args, obj.UserEventAnswerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_event_answer`),
		qm.WhereIn(`user_event_answer.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserEventAnswer")
	}

	var resultSlice []*UserEventAnswer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserEventAnswer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_event_answer")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_event_answer")
	}

	if len(userEventAnswerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserEventAnswer = foreign
		if foreign.R == nil {
			foreign.R = &userEventAnswerR{}
		}
		foreign.R.UserEventAnswerUnits = append(foreign.R.UserEventAnswerUnits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserEventAnswerID == foreign.ID {
				local.R.UserEventAnswer = foreign
				if foreign.R == nil {
					foreign.R = &userEventAnswerR{}
				}
				foreign.R.UserEventAnswerUnits = append(foreign.R.UserEventAnswerUnits, local)
				break
			}
		}
	}

	return nil
}

// SetEventTimeUnit of the userEventAnswerUnit to the related item.
// Sets o.R.EventTimeUnit to related.
// Adds o to related.R.UserEventAnswerUnits.
func (o *UserEventAnswerUnit) SetEventTimeUnit(ctx context.Context, exec boil.ContextExecutor, insert bool, related *EventTimeUnit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_event_answer_unit` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"event_time_unit_id"}),
		strmangle.WhereClause("`", "`", 0, userEventAnswerUnitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EventTimeUnitID = related.ID
	if o.R == nil {
		o.R = &userEventAnswerUnitR{
			EventTimeUnit: related,
		}
	} else {
		o.R.EventTimeUnit = related
	}

	if related.R == nil {
		related.R = &eventTimeUnitR{
			UserEventAnswerUnits: UserEventAnswerUnitSlice{o},
		}
	} else {
		related.R.UserEventAnswerUnits = append(related.R.UserEventAnswerUnits, o)
	}

	return nil
}

// SetUserEventAnswer of the userEventAnswerUnit to the related item.
// Sets o.R.UserEventAnswer to related.
// Adds o to related.R.UserEventAnswerUnits.
func (o *UserEventAnswerUnit) SetUserEventAnswer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserEventAnswer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_event_answer_unit` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_event_answer_id"}),
		strmangle.WhereClause("`", "`", 0, userEventAnswerUnitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserEventAnswerID = related.ID
	if o.R == nil {
		o.R = &userEventAnswerUnitR{
			UserEventAnswer: related,
		}
	} else {
		o.R.UserEventAnswer = related
	}

	if related.R == nil {
		related.R = &userEventAnswerR{
			UserEventAnswerUnits: UserEventAnswerUnitSlice{o},
		}
	} else {
		related.R.UserEventAnswerUnits = append(related.R.UserEventAnswerUnits, o)
	}

	return nil
}

// UserEventAnswerUnits retrieves all the records using an executor.
func UserEventAnswerUnits(mods ...qm.QueryMod) userEventAnswerUnitQuery {
	mods = append(mods, qm.From("`user_event_answer_unit`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_event_answer_unit`.*"})
	}

	return userEventAnswerUnitQuery{q}
}

// FindUserEventAnswerUnit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserEventAnswerUnit(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*UserEventAnswerUnit, error) {
	userEventAnswerUnitObj := &UserEventAnswerUnit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_event_answer_unit` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userEventAnswerUnitObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_event_answer_unit")
	}

	if err = userEventAnswerUnitObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userEventAnswerUnitObj, err
	}

	return userEventAnswerUnitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserEventAnswerUnit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_event_answer_unit provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userEventAnswerUnitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userEventAnswerUnitInsertCacheMut.RLock()
	cache, cached := userEventAnswerUnitInsertCache[key]
	userEventAnswerUnitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userEventAnswerUnitAllColumns,
			userEventAnswerUnitColumnsWithDefault,
			userEventAnswerUnitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userEventAnswerUnitType, userEventAnswerUnitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userEventAnswerUnitType, userEventAnswerUnitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_event_answer_unit` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_event_answer_unit` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_event_answer_unit` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userEventAnswerUnitPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_event_answer_unit")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_event_answer_unit")
	}

CacheNoHooks:
	if !cached {
		userEventAnswerUnitInsertCacheMut.Lock()
		userEventAnswerUnitInsertCache[key] = cache
		userEventAnswerUnitInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserEventAnswerUnit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserEventAnswerUnit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userEventAnswerUnitUpdateCacheMut.RLock()
	cache, cached := userEventAnswerUnitUpdateCache[key]
	userEventAnswerUnitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userEventAnswerUnitAllColumns,
			userEventAnswerUnitPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_event_answer_unit, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_event_answer_unit` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userEventAnswerUnitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userEventAnswerUnitType, userEventAnswerUnitMapping, append(wl, userEventAnswerUnitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_event_answer_unit row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_event_answer_unit")
	}

	if !cached {
		userEventAnswerUnitUpdateCacheMut.Lock()
		userEventAnswerUnitUpdateCache[key] = cache
		userEventAnswerUnitUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userEventAnswerUnitQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_event_answer_unit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_event_answer_unit")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserEventAnswerUnitSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userEventAnswerUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_event_answer_unit` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userEventAnswerUnitPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userEventAnswerUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userEventAnswerUnit")
	}
	return rowsAff, nil
}

var mySQLUserEventAnswerUnitUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserEventAnswerUnit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_event_answer_unit provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userEventAnswerUnitColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserEventAnswerUnitUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userEventAnswerUnitUpsertCacheMut.RLock()
	cache, cached := userEventAnswerUnitUpsertCache[key]
	userEventAnswerUnitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userEventAnswerUnitAllColumns,
			userEventAnswerUnitColumnsWithDefault,
			userEventAnswerUnitColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userEventAnswerUnitAllColumns,
			userEventAnswerUnitPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert user_event_answer_unit, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`user_event_answer_unit`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_event_answer_unit` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userEventAnswerUnitType, userEventAnswerUnitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userEventAnswerUnitType, userEventAnswerUnitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for user_event_answer_unit")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userEventAnswerUnitType, userEventAnswerUnitMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for user_event_answer_unit")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_event_answer_unit")
	}

CacheNoHooks:
	if !cached {
		userEventAnswerUnitUpsertCacheMut.Lock()
		userEventAnswerUnitUpsertCache[key] = cache
		userEventAnswerUnitUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserEventAnswerUnit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserEventAnswerUnit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserEventAnswerUnit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userEventAnswerUnitPrimaryKeyMapping)
	sql := "DELETE FROM `user_event_answer_unit` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_event_answer_unit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_event_answer_unit")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userEventAnswerUnitQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userEventAnswerUnitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_event_answer_unit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_event_answer_unit")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserEventAnswerUnitSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userEventAnswerUnitBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userEventAnswerUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_event_answer_unit` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userEventAnswerUnitPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userEventAnswerUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_event_answer_unit")
	}

	if len(userEventAnswerUnitAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserEventAnswerUnit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserEventAnswerUnit(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserEventAnswerUnitSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserEventAnswerUnitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userEventAnswerUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_event_answer_unit`.* FROM `user_event_answer_unit` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userEventAnswerUnitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserEventAnswerUnitSlice")
	}

	*o = slice

	return nil
}

// UserEventAnswerUnitExists checks if the UserEventAnswerUnit row exists.
func UserEventAnswerUnitExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_event_answer_unit` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_event_answer_unit exists")
	}

	return exists, nil
}

// Exists checks if the UserEventAnswerUnit row exists.
func (o *UserEventAnswerUnit) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserEventAnswerUnitExists(ctx, exec, o.ID)
}
